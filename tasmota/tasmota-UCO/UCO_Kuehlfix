/*
  user_config_override.h - user configuration overrides my_user_config.h for Tasmota

  Copyright (C) 2021  Theo Arends

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef _USER_CONFIG_OVERRIDE_H_
#define _USER_CONFIG_OVERRIDE_H_

/*****************************************************************************************************\
 * USAGE:
 *   To modify the stock configuration without changing the my_user_config.h file:
 *   (1) copy this file to "user_config_override.h" (It will be ignored by Git)
 *   (2) define your own settings below
 *
 ******************************************************************************************************
 * ATTENTION:
 *   - Changes to SECTION1 PARAMETER defines will only override flash settings if you change define CFG_HOLDER.
 *   - Expect compiler warnings when no ifdef/undef/endif sequence is used.
 *   - You still need to update my_user_config.h for major define USE_MQTT_TLS.
 *   - All parameters can be persistent changed online using commands via MQTT, WebConsole or Serial.
\*****************************************************************************************************/

#include "user_private_data.h"               // not sharing sensible data with the global community; hawa-lc4
// don't forget to check and modify the file above!

// #ifdef %identifier%
// #undef %identifier%
// #endif
// #define %identifier%   %the_new_value%

#ifdef PROJECT
#undef PROJECT
#endif
#define PROJECT               "Kuehlfix"      // die Kühlung im Vorratsraum; openWB device 1

#ifdef MY_RULE
  #error **** Build: SCRIPT only! ****
#endif // MY_RULE

#ifdef MY_SCRIPT
  // #warning **** Build: SCRIPT ****
  #undef CODE_IMAGE_STR
  #define CODE_IMAGE_STR "MY_SCRIPT_Kuehlfix"

  #undef USE_RULES
  #undef USE_TIMERS
  #undef USE_TIMERS_WEB
  #undef USE_SUNRISE

  #define USE_SCRIPT

  #define USE_SCRIPT_SERIAL
  #define USE_SCRIPT_TIMERS
  // #define USE_SCRIPT_SUB_COMMAND
  #define USE_SCRIPT_GLOBVARS
  // #define USE_SCRIPT_JSON_EXPORT
  #define USE_SCRIPT_WEB_DISPLAY
  #define USE_BUTTON_EVENT
  #define SCRIPT_POWER_SECTION
  #define START_SCRIPT_FROM_BOOT      // https://tasmota.github.io/docs/Scripting-Language/
  #define USER_BACKLOG "Script 1"     // hier nur script aktivieren, sonst nichts!

  #define PRECONFIGURED_SCRIPT \
  ">D 48\ntempS=15.0\nmanu=0\ndevM=0\ndevS=0\nt:dpON=600\nt:tMS=240\nbutA=\"\"\nbutP=0\n" \
    "topM=\"openWB/config/get/SmartHome/Devices/1/mode\"\n" \
    "topS=\"openWB/SmartHome/Devices/1/Status\"\n" \
    "suf=\"device_manual_control\"\n\n" \
  ">B\nif pwr[3]==1 {\n=>Power3 0\n}\n" \
    "->SetOption73 1\n->SetOption32 30\n->SwitchMode1 5\n" \
    "->DisplayRotate 2\n->DisplayFont 0\n->Power4 on\n\n" \
    "if mqtts>0 {\n=#publish\n}\n\n" \
    "#publish\n+>Subscribe devM, %topM%\n+>Subscribe devS, %topS%\n\n" \
  ">R\n=>Hostname Kuehlfix\n\n" \
  ">E\n" \
    "butA=Button1#Action\n" \
    "if butA==\"HOLD\" {\n" \
      "if manu==0 {\nmanu=1\n} else {\nmanu=0\n}\n" \
      "=>publish %topic%/mode %0manu%\n" \
    "}\n" \
    "if (butA==\"DOUBLE\" and manu==1) {\n=>publish %topic%/mode 1\n" \
      "if pwr[1]==0 {\n" \
        "=>publish %topic%/%suf% 1\nbutP=11\n" \
        "if (mqtts==0 or devS==0) {\n->Power1 1\n}\n"\
      "} else {\n" \
        "=>publish %topic%/%suf% 0\nbutP=10\n" \
        "if (mqtts==0 or devS==0) {\n->Power1 0\n}\n"\
      "}\n" \
    "}\nbutA=\"\"\n\n" \
  ">b\ndpON=600\n\n" \
  ">T\ntemp=DS18B20#Temperature\n\n" \
  ">S\nif ((butP==10 and pwr[1]==1) or (butP==11 and pwr[1]==0)) {\n" \
      "->LedPower2 toggle\n} else {\n" \
      "butP=0\n}\n" \
    "if butP==0 {\n->LedPower2 %manu%\n}\n" \
    "if mqttc>0 {\n=#publish\n}\n" \
    "if upd[devM]>0 {\nmanu=devM\n}\n\n" \
    "if dpON==0 {\n->DisplayDimmer 0\n" \
    "} else {\n->DisplayDimmer 10\n" \
      "dt [zs4l1c1]%1temp%\ndt [s2l2c9] ~f8C\ndt [s2l4c1]delay %0tMS%\n" \
    "}\n" \
    "if (pwr[1]==1 and temp>=tempS and tMS==0) {\n->Power3 1\ntMS=-1\n}\n" \
    "if ((pwr[1]==0 or temp<tempS) and pwr[3]==1) {\n->Power3 0\ntMS=240\n}\n\n" \
  ">W\n@Manuelle Steuerung:&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;%0manu%\n" \
    "delay Motorschutz:&emsp;&emsp;&emsp;&emsp;%0tMS% sec\n" \
    "POWER1 ist die Gerätesteuerung.\nPOWER2 ist Manuell|Automatic.\n" \
    "POWER3 ist das Relais! NICHT SCHALTEN!\nPOWER4 ist das Display.\n"

// 1489 Zeichen Skript; 6724 Zeichen übrig von 8192

/*
SetOption73 	Detach buttons from relays and send multi-press and hold MQTT messages instead
      0 = disable (default)
      1 = enable
Example message: {"Button1":{"Action":"SINGLE"}}

SetOption32 	Number of 0.1 seconds to hold button before sending HOLD action message.
      1..100 to set button hold time (default = 40).
      This option also affects the time required to perform a firmware defaults reset (10x HOLD action time).
      There is no firmware reset on using the HOLD action with shutterbuttons.
*/
#endif // MY_SCRIPT

#ifdef USER_TEMPLATE
#undef USER_TEMPLATE
#endif

#ifdef ESP8266
#define USER_TEMPLATE "{\"NAME\":\"Kuehlfix\",\"GPIO\":[32,0,576,0,640,608,0,0,224,1312,225,226,0,4896],\"FLAG\":0,\"BASE\":18,\"CMND\":\"AdcParam 7,0,1500,0.235,0.15\",\"CMND\":\"Module 0\"}"  // [Template] Set JSON template
/* https://tasmota.github.io/docs/Components/  &  https://randomnerdtutorials.com/esp8266-pinout-reference-gpios
  GPIO0  Taster gegen GND (kann damit auch zum FlashBoot benutzt werden) -- 32     // Taster zum umschalten Manuell|Automatik mit openWB
  GPIO1  TX UART0                                                        -- 0      // 
  GPIO2  hat die interne LED gegen VCC; Funktion LedLink (544; _i: 576)  -- 576    // LedLink_i
  GPIO3  RX UART0                                                        -- 0      // 
  GPIO4  I2C SDA (640)                                                   -- 640    // Display
  GPIO5  I2C SCL (608)                                                   -- 608    // Display
  GPIO9  DO NOT USE!!                                                    -- 0      // DO NOT USE!!
  GPIO10 DO NOT USE!!                                                    -- 0      // DO NOT USE!!
  GPIO12 SPI MISO (672)                                                  -- 224    // Relais1 - dummy ==> LED ge. ==> Anforderung von openWB
  GPIO13 SPI MOSI (704)                                                  -- 1312   // DS18x20 1-wire
  GPIO14 SPI CLK  (736)                                                  -- 225    // Relais2 - dummy ==> LED rt. ==> Manuell/Automatik
  GPIO15 SPI SS (768) - SDCard CS (6240)                                 -- 226    // Relais3 ==> LED bl. ==> Relais nur vom Tasmota gesteuert
  GPIO16 (wake-up aus dem deep-sleep Modus: 4096)                        -- 0      // 
  GPIO17 ist der AD0 (CT Power: 4896)                                    -- 4896   // ACS712-20 Stromsensor 100mv/A
!!  ACHTUNG:  der D1-mini hat am Eingang AD0 einen Spannungsteiler und damit eine max. Eingangsspannung von 3,3V
              der ESP8266 hat keinen Spannungsteiler und damit eine max. Eingangsspannung von 1,0V

  AdcParam:  7
    1. Param:   Nullpunkt für DC Messung; bei AC immer 0!
    2. Param:   Multiplikator; param = (100.000 * Irms / ADC_value); ADC_value = Upp_sensor / 5,0244 * 1023; 1 / 820 * (3300 + 820) = 5,0244   // für ACS712 Stromsensoren
                (https://github.com/arendst/Tasmota/discussions/19409#discussioncomment-6857837)
    3. Param:   Spannung; Wert * 1000
    4. Param:   NULL-Offset; Strom kleiner als der hier eingetragene wird als 0 behandelt
*/
// hawa-lc4: xsns_02_analog.ino Zeile 482 (12.5.0.2) bzw. 504 (13.2.0.2) aktivieren des logging der ADC Werte
#define hawa_LOG               false
#define USE_UFILESYS
#define UFSYS_SIZE 8192
#endif    // ESP8266

#ifdef LUATOS_ESP32C3     // Luatos-ESP32C3 board mit AIR101-LCD Modul
#define DSP_ROM_DESC \
  ":H,ST7735S,160,80,16,SPI,1,7,2,3,6,11,10,*,16\n" \
  ":S,2,1,1,0,30,30\n" \
  ":I\n" \
  "01,80\n" \
  "11,80\n" \
  "B1,3,01,2C,2D\n" \
  "B2,3,01,2C,2D\n" \
  "B3,6,01,2C,2D,01,2C,2D\n" \
  "B4,1,07\n" \
  "C0,3,A2,04,84\n" \
  "C1,1,C5\n" \
  "C2,2,0A,00\n" \
  "C3,2,8A,2A\n" \
  "C4,2,8A,EE\n" \
  "C5,1,0E\n" \
  "20,0\n" \
  "36,1,C8\n" \
  "3A,1,05\n" \
  "2A,4,00,02,00,7F\n" \
  "2B,4,00,01,00,7F\n" \
  "E0,10,02,1C,07,12,37,32,29,2D,29,25,2B,39,00,01,03,10\n" \
  "E1,10,03,1D,07,06,2E,2C,29,2D,2E,2E,37,3F,00,00,02,10\n" \
  "13,80\n" \
  "29,80\n" \
  ":o,28\n" \
  ":O,29\n" \
  ":A,2A,2B,2C,16\n" \
  ":R,36\n" \
  ":0,60,00,18,00\n" \
  "i,20,21\n" \
  ":B,60,0\n" \
  "#\n"

#define USER_TEMPLATE "{\"NAME\":\"Luatos 32C3\",\"GPIO\":[1,6210,736,704,1,1,800,768,1,1,8736,0,544,1,0,0,0,0,1,1,1,1],\"FLAG\":0,\"BASE\":1,\"CMND\":\"Module 0\"}"
/* https://tasmota.github.io/docs/Components/  &  https://www.studiopieters.nl/esp32-c3-pinout/
  GPIO0 ADC0 U1TXD                                                       -- 0      //  
  GPIO1 ADC1 U1RXD                                                       -- 0      // 
  GPIO2 ADC2                                                             -- 0      // 
  GPIO3 ADC3                                                             -- 0      // 
  GPIO4 ADC4 I2C_SDA                                                     -- 0      // 
  GPIO5 ADC5 I2C_SCL                                                     -- 0      // 
  GPIO6                                                                  -- 0      // 
  GPIO7                                                                  -- 0      // 
  GPIO8                                                                  -- 0      // 
  GPIO9                                                                  -- 0      // 
  GPIO10                                                                 -- 0      // 
  GPIO11 NOT AVAILABLE                                                   -- 0      // is NOT AVAILABLE on this board
  GPIO12 LED-D4 LedLink                                                  -- 544    // 
  GPIO13 LED-D5 PWM_1                                                    -- 416    // 
  GPIO14 NOT AVAILABLE                                                   -- 0      // is NOT AVAILABLE on this board 
  GPIO15 NOT AVAILABLE                                                   -- 0      // is NOT AVAILABLE on this board 
  GPIO16 NOT AVAILABLE                                                   -- 0      // is NOT AVAILABLE on this board 
  GPIO17 NOT AVAILABLE                                                   -- 0      // is NOT AVAILABLE on this board 
  GPIO18                                                                 -- 0      // 
  GPIO19                                                                 -- 0      // 
  GPIO20 U0RXD                                                           -- 0      // 
  GPIO21 U0TXD                                                           -- 0      // 
*/
// hawa-lc4: xsns_02_analog.ino Zeile 482 (12.5.0.2) bzw. 504 (13.2.0.2) aktivieren des logging der ADC Werte
#define hawa_LOG               false
#endif    // LUATOS_ESP32C3

#ifdef ESP32      // Baustelle!
// #define USER_TEMPLATE "{\"NAME\":\"Luatos CORE-ESP32\",\"GPIO\":[1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1],\"FLAG\":0,\"BASE\":1,\"CMND\":\"Module 0\"}"
/* https://tasmota.github.io/docs/Components/  &  https://randomnerdtutorials.com/esp32-pinout-reference-gpios/
*/
// hawa-lc4: xsns_02_analog.ino Zeile 482 (12.5.0.2) bzw. 504 (13.2.0.2) aktivieren des logging der ADC Werte
#define hawa_LOG               false
#endif    // ESP32

#define GUI_EDIT_FILE
#define GUI_TRASH_FILE

#define USE_I2C                              // I2C using library wire (+10k code, 0k2 mem, 124 iram)
#define USE_DISPLAY                          // Add I2C/TM1637/MAX7219 Display Support (+2k code)
#undef USE_DISPLAY_MODES1TO5                 // Enable display mode 1 to 5 in addition to mode 0
#undef USE_DISPLAY_LCD                       // [DisplayModel 1] [I2cDriver3] Enable Lcd display (I2C addresses 0x27 and 0x3F) (+6k code)
#define USE_DISPLAY_SSD1306                  // [DisplayModel 2] [I2cDriver4] Enable SSD1306 Oled 128x64 display (I2C addresses 0x3C and 0x3D) (+16k code)
#undef USE_DISPLAY_MATRIX                    // [DisplayModel 3] [I2cDriver5] Enable 8x8 Matrix display (I2C adresseses see below) (+11k code)
#undef USE_DISPLAY_SEVENSEG                  // [DisplayModel 11] [I2cDriver47] Enable sevenseg display (I2C 0x70-0x77) (<+11k code)
#undef USE_ADE7953
#undef SHOW_SPLASH

#ifndef USE_DS18x20
#define USE_DS18x20                             // Add support for DS18x20 sensors with id sort, single scan and read retry (+2k6 code)
#endif

// #ifndef DS18x20_USE_ID_ALIAS
// #define DS18x20_USE_ID_ALIAS                   // Add support aliasing for DS18x20 sensors. See comments in xsns_05 files (+0k5 code)
// #endif
/* #define DS18x20_USE_ID_ALIAS in my_user_config.h or user_config_override.h
  * Use alias for fixed sensor name in scripts by autoexec. Command: DS18Alias XXXXXXXXXXXXXXXX,N where XXXXXXXXXXXXXXXX full serial and N number 1-255
  * Result in JSON:  "DS18Sens_2":{"Id":"000003287CD8","Temperature":26.3} (example with N=2)
  * add 8 bytes used memory
*/

#ifdef TELE_PERIOD
#undef TELE_PERIOD
#endif
#define TELE_PERIOD             300              // [TelePeriod] Telemetry (0 = disable, 10 - 3600 seconds)

#ifdef MODULE
#undef MODULE
#endif
#define MODULE                 USER_MODULE

#ifdef FRIENDLY_NAME
#undef FRIENDLY_NAME
#endif
#define FRIENDLY_NAME          PROJECT

#ifdef GUI_SHOW_HOSTNAME
#undef GUI_SHOW_HOSTNAME
#endif
#define GUI_SHOW_HOSTNAME      true

#ifdef APP_TIMEZONE
#undef APP_TIMEZONE
#endif
#define APP_TIMEZONE           99     // https://tasmota-tz.netlify.app/

#ifdef MY_LANGUAGE
#undef MY_LANGUAGE
#endif
#define MY_LANGUAGE            de_DE

#ifdef MQTT_USE
#undef MQTT_USE
#endif
#define MQTT_USE               true

#ifdef MQTT_TOPIC
#undef MQTT_TOPIC
#endif
#define MQTT_TOPIC             "openWB/config/set/SmartHome/Devices/1"

#ifdef MQTT_FULLTOPIC
#undef MQTT_FULLTOPIC
#endif
#define MQTT_FULLTOPIC         PROJECT

#ifndef SUPPORT_MQTT_EVENT
#define SUPPORT_MQTT_EVENT                     // Support trigger event with MQTT subscriptions (+3k5 code)
#endif

#ifdef WEB_USERNAME
#undef WEB_USERNAME
#endif
#define WEB_USERNAME            ""

#ifdef WEB_PASSWORD
#undef WEB_PASSWORD
#endif
#define WEB_PASSWORD            ""

#ifdef USE_DEEPSLEEP
#undef USE_DEEPSLEEP                              
#endif 

#ifdef USE_DOMOTICZ
#undef USE_DOMOTICZ                              
#endif 

#ifdef USE_EMULATION_HUE
#undef USE_EMULATION_HUE
#endif

#ifdef USE_EMULATION_WEMO
#undef USE_EMULATION_WEMO
#endif

#ifdef USE_TELEGRAM
#undef USE_TELEGRAM
#endif

#ifdef USE_KNX
#undef USE_KNX
#endif

#ifdef USE_SONOFF_RF
#undef USE_SONOFF_RF
#endif

#ifdef ROTARY_V1
#undef ROTARY_V1
#endif

#ifdef USE_SONOFF_SC
#undef USE_SONOFF_SC
#endif

#ifdef USE_TUYA_MCU
#undef USE_TUYA_MCU
#endif

#ifdef USE_ARMTRONIX_DIMMERS
#undef USE_ARMTRONIX_DIMMERS
#endif

#ifdef USE_PS_16_DZ
#undef USE_PS_16_DZ
#endif

#ifdef USE_SONOFF_IFAN
#undef USE_SONOFF_IFAN
#endif

#ifdef USE_BUZZER
#undef USE_BUZZER
#endif

#ifdef USE_ARILUX_RF
#undef USE_ARILUX_RF
#endif

#ifdef USE_SHUTTER
#undef USE_SHUTTER
#endif

#ifdef USE_EXS_DIMMER
#undef USE_EXS_DIMMER
#endif

#ifdef USE_DEVICE_GROUPS
#undef USE_DEVICE_GROUPS
#endif

#ifdef USE_PWM_DIMMER
#undef USE_PWM_DIMMER
#endif

#ifdef USE_SONOFF_D1
#undef USE_SONOFF_D1
#endif

#ifdef USE_SHELLY_DIMMER
#undef USE_SHELLY_DIMMER
#endif

#ifdef USE_LIGHT
#undef USE_LIGHT
#endif

#ifdef USE_WS2812
#undef USE_WS2812
#endif

#ifdef USE_MY92X1
#undef USE_MY92X1
#endif

#ifdef USE_SM16716
#undef USE_SM16716
#endif

#ifdef USE_SM2135
#undef USE_SM2135
#endif

#ifdef USE_SM2335
#undef USE_SM2335
#endif

#ifdef USE_BP1658CJ
#undef USE_BP1658CJ
#endif

#ifdef USE_BP5758D
#undef USE_BP5758D
#endif

#ifdef USE_SONOFF_L1
#undef USE_SONOFF_L1
#endif

#ifdef USE_ELECTRIQ_MOODL
#undef USE_ELECTRIQ_MOODL
#endif

#ifdef USE_LIGHT_PALETTE
#undef USE_LIGHT_PALETTE
#endif

#ifdef USE_LIGHT_VIRTUAL_CT
#undef USE_LIGHT_VIRTUAL_CT
#endif

#ifdef USE_DGR_LIGHT_SEQUENCE
#undef USE_DGR_LIGHT_SEQUENCE
#endif

#ifdef USE_SPI
#undef USE_SPI
#endif

#ifdef USE_SERIAL_BRIDGE
#undef USE_SERIAL_BRIDGE
#endif

#ifdef USE_ENERGY_MARGIN_DETECTION
#undef USE_ENERGY_MARGIN_DETECTION
#endif

#ifdef USE_ENERGY_POWER_LIMIT
#undef USE_ENERGY_POWER_LIMIT
#endif

#ifdef USE_ENERGY_DUMMY
#undef USE_ENERGY_DUMMY
#endif

#ifdef USE_HLW8012
#undef USE_HLW8012
#endif

#ifdef USE_CSE7766
#undef USE_CSE7766
#endif

#ifdef USE_PZEM004T
#undef USE_PZEM004T
#endif

#ifdef USE_PZEM_AC
#undef USE_PZEM_AC
#endif

#ifdef USE_PZEM_DC
#undef USE_PZEM_DC
#endif

#ifdef USE_MCP39F501
#undef USE_MCP39F501
#endif

#ifdef USE_BL09XX
#undef USE_BL09XX
#endif

#ifdef USE_DHT
#undef USE_DHT
#endif

#ifdef USE_IR_REMOTE
#undef USE_IR_REMOTE
#endif

#endif  // _USER_CONFIG_OVERRIDE_H_
