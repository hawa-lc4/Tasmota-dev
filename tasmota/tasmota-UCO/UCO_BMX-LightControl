/*
  user_config_override.h - user configuration overrides my_user_config.h for Tasmota

  Copyright (C) 2021  Theo Arends

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef _USER_CONFIG_OVERRIDE_H_
#define _USER_CONFIG_OVERRIDE_H_

/*****************************************************************************************************\
 * USAGE:
 *   To modify the stock configuration without changing the my_user_config.h file:
 *   (1) copy this file to "user_config_override.h" (It will be ignored by Git)
 *   (2) define your own settings below
 *
 ******************************************************************************************************
 * ATTENTION:
 *   - Changes to SECTION1 PARAMETER defines will only override flash settings if you change define CFG_HOLDER.
 *   - Expect compiler warnings when no ifdef/undef/endif sequence is used.
 *   - You still need to update my_user_config.h for major define USE_MQTT_TLS.
 *   - All parameters can be persistent changed online using commands via MQTT, WebConsole or Serial.
\*****************************************************************************************************/

#include "user_private_data2.h"               // not sharing sensible data with the global community; hawa-lc4 (M1)
// don't forget to check and modify the file above!

// #ifdef %identifier%
// #undef %identifier%
// #endif
// #define %identifier%   %the_new_value%

#ifdef PROJECT
#undef PROJECT
#endif
#define PROJECT               "BMX-LightControl"

#ifdef MY_RULE
  #error **** Build SCRIPT only! ****
#endif // MY_RULE

#ifdef MY_SCRIPT
  #undef CODE_IMAGE_STR
  #define CODE_IMAGE_STR "hawa-lc4_BMX-LightControl"

  #ifdef USE_RULES
  #undef USE_RULES
  #endif

  #undef USE_TIMERS
  #undef USE_TIMERS_WEB
  #undef USE_SUNRISE

  #ifndef USE_SCRIPT
  #define USE_SCRIPT
  #define USE_SCRIPT_SERIAL
  #define USE_SCRIPT_TIMERS
  // #define USE_SCRIPT_SUB_COMMAND
  #define USE_SCRIPT_FATFS_EXT        // https://github.com/arendst/Tasmota/discussions/19031#discussioncomment-6359175
  #define USE_SCRIPT_GLOBVARS
  // #define USE_SCRIPT_JSON_EXPORT
  // #define USE_SCRIPT_I2C
  // #define USE_SCRIPT_ONEWIRE
  // #define USE_SCRIPT_SPI
  // #define USE_SCRIPT_TCP_SERVER
  #define USE_SCRIPT_WEB_DISPLAY
  #define USE_BUTTON_EVENT
  #define SCRIPT_POWER_SECTION
  #define START_SCRIPT_FROM_BOOT      // https://tasmota.github.io/docs/Scripting-Language/
  #define USER_BACKLOG "Script 1"     // hier nur script aktivieren, sonst nichts! Siehe https://tasmota.github.io/docs/Compile-your-build/#user_backlog
  #endif    // USE_SCRIPT

  #ifdef PRECONFIGURED_SCRIPT
  #undef PRECONFIGURED_SCRIPT
  #endif
  #define PRECONFIGURED_SCRIPT \
  ">D 48\n" \
    "fr=0\nres=0\ncnt=0\nMAf=0\nUIDf=0\nUIDrU=0\n" \
    "UIDr=\"\"\nstr=\"\"\nt:doTi=-1\nt:MaEn=-1\n\n" \
  ">B\n->SetOption0 0\n" \
    "->PWM1 10\n->PWM2 10\n" \
    "fr=fo(\"/\" 0)\n" \
    "for cnt 1 20 1\nres=fr(str fr)\n" \
    "if res>0 {\nprint %0cnt% : %str%\n} else {\nbreak\n}\n" \
    "next\nfc(fr)\n\n" \
    "#LOGTOFILE\n" \
      "fr=fo(\"/rfidLog.txt\" 2)\nres=fz(fr)\n" \
      "if res>=4096 {\nfc(fr)\nfd(\"/rfidLog.old\")\nfrn(\"/rfidLog.txt\" \"/rfidLog.old\")\nfr=fo(\"/rfidLog.txt\" 1)\n}\n" \
      "str=tstamp+\"\\t\"+UIDr+\"\\t\"+str+\"\\n\"\nres=fw(str fr)\nfc(fr)\n" \
  ">R\n=>Hostname BMX-LightControl\n\n" \
  ">E\nUIDr=RC522#UID\n\n" \
  ">F\nif upd[UIDr]>0 {\nUIDrU=1\n}\n\n" \
  ">S\n" \
    "if MaEn==0 {\ndoTi=0\nMAf=0\nMaEn=-1\n}\n" \
    "if MAf==1 {\n->PWM1 100\n->PWM2 100\n" \
      "if UIDrU>0 {\nfr=fo(\"/rfidUIDs.txt\" 0)\n" \
      "for cnt 1 20 1\nres=fr(str fr)\n" \
        "if res>0 {\nif str==UIDr {\nUIDf=1\n}\n" \
        "} else {\nbreak\n}\nnext\n" \
      "fc(fr)\n" \
      "if UIDf==0 {\nstr=UIDr+\"\\n\"\nfr=fo(\"/rfidUIDs.txt\" 2)\nres=fw(str fr)\nfc(fr)\n" \
        "if res>0 {\n-> PWM1 0\n-> PWM2 1000\nMAf=0\ndoTi=3\nstr=\"Chip eingetragen\"\n=#LOGTOFILE\n" \
        "} else {\n-> PWM1 1000\n-> PWM2 0\nMAf=0\ndoTi=3\nstr=\"FEHLER +UID+\"\n=#LOGTOFILE\n}\n" \
      "} else {\n" \
        "-> PWM1 1000\n-> PWM2 0\nMAf=0\ndoTi=3\nUIDf=0\nstr=\"Chip bekannt\"\n=#LOGTOFILE\n}\n" \
      "}\nUIDrU=0\n" \
    "}\n" \
    "if UIDrU>0 {\n" \
      "fr=fo(\"/masterUID.txt\" 0)\nres=fr(str fr)\n" \
      "if str==UIDr {\nMAf=1\nMaEn=30\ndoTi=-1\nstr=\"Master erkannt\"\n=#LOGTOFILE\n}\n" \
      "fc(fr)\n" \
      "if MAf==0 {\nfr=fo(\"/rfidUIDs.txt\" 0)\n" \
        "for cnt 1 20 1\nres=fr(str fr)\n" \
          "if res>0 {\nif str==UIDr {\nUIDf=1\n}\n" \
          "} else {\nbreak\n}\nnext\n" \
        "fc(fr)\ndoTi=3\n" \
        "if UIDf==1 {\n->PWM2 1000\n} else {\n->PWM1 1000\nstr=\"Chip unbekannt\"\n=#LOGTOFILE\n}\n" \
      "}\nUIDrU=0\n" \
    "}\n" \
    "if UIDf==1 {\nif pwr[1]==0 {\nstr=\"Licht an\"\n} else {\nstr=\"Licht aus\"\n}\n=#LOGTOFILE\n" \
      "->Power1 toggle\nUIDf=0\n}\n" \
    "if doTi==0 {\n->PWM1 10\n->PWM2 10\ndoTi=-1\n}\n"

/*    1563 Zeichen Skript; 6629 Zeichen übrig von 8192
      https://tasmota.github.io/docs/Commands/#setoptions
      SetOption0 	- Save power state and use after restart (=SaveState); 0 = disable
      SetOption73 - Decouple buttons from controlling power outputs; 1 = decoupled
*/
#endif // MY_SCRIPT

#ifdef USER_TEMPLATE
#undef USER_TEMPLATE
#endif


/*  Espressif ESP Modules:  https://www.espressif.com/en/products/modules  */
#ifdef ESP8266
#define USER_TEMPLATE "{\"NAME\":\"BMX-LightControl\",\"GPIO\":[5632,417,576,416,640,608,0,0,672,704,736,224,5792,0],\"FLAG\":0,\"BASE\":18,\"CMND\":\"Module 0\"}"  // [Template] Set JSON template
/* https://tasmota.github.io/docs/Components/  &  https://tasmota.github.io/docs/Supported-Peripherals/  &  https://randomnerdtutorials.com/esp8266-pinout-reference-gpios
  GPIO0  (D3) Taster gegen GND (kann damit auch zum FlashBoot benutzt werden) -- 5632   // RC522 Rst (mit SN74LVC1G17 entkoppeln!)
  GPIO1  (TX) TX UART0                                                        -- 417    // PWM2 (grün)
  GPIO2  (D4) hat die interne LED gegen VCC; Funktion LedLink (544; _i: 576)  -- 576    // LedLink
  GPIO3  (RX) RX UART0                                                        -- 416    // PWM1 (rot)
  GPIO4  (D2) I2C SDA (640)                                                   -- 640    // I2C SDA
  GPIO5  (D1) I2C SCL (608)                                                   -- 608    // I2C SCL
  GPIO9  (  ) DO NOT USE!!                                                    -- 0      // DO NOT USE!!
  GPIO10 (  ) DO NOT USE!!                                                    -- 0      // DO NOT USE!!
  GPIO12 (D6) SPI MISO (672)                                                  -- 672    // SPI MISO
  GPIO13 (D7) SPI MOSI (704)                                                  -- 704    // SPI MOSI
  GPIO14 (D5) SPI CLK  (736)                                                  -- 736    // SPI CLK
  GPIO15 (D8) SPI SS (768) - SDCard CS (6240)                                 -- 224    // Relay1
  GPIO16 (D0) (wake-up aus dem deep-sleep Modus: 4096)                        -- 5792   // RC522 CS
  GPIO17 (A0) ist der AD0 (CT Power: 4896)                                    -- 0      // 
!!  ACHTUNG:  der D1-mini hat am Eingang AD0 einen Spannungsteiler (220k + 100k) und damit eine max. Eingangsspannung von 3,2V
              der ESP8266 hat keinen Spannungsteiler und damit eine max. Eingangsspannung von 1,0V

  AdcParam:  7 = CT Power
    1. Param:   Nullpunkt für DC Messung; bei AC immer 0!
    2. Param:   Multiplikator; param = (100.000 * Irms / ADC_value); ADC_value = Upp_sensor / 5 * 1023; (6800 + 1700) / 1700 = 5   // für ACS712 Stromsensoren
                (https://github.com/arendst/Tasmota/discussions/19409#discussioncomment-6857837)
    3. Param:   Spannung; Wert * 1000 (0.235 ergibt 235V)
    4. Param:   NULL-Offset; Strom kleiner als der hier eingetragene wird als 0 behandelt
    
    ACS712-05: 185mV/A ==> UPP = 2,616V; bei einem Teiler exakt 4:1 ergibt das als Multiplikator 934
    ACS712-20: 100mV/A ==> UPP = 5,656V (kann also nur bis ca. 16A AC genutzt werden!); bei einem Teiler exakt 4:1 ergibt das als Multiplikator 1728
    Der Ausgang des ACS712 darf nur mit 4,7kOhm oder größer belastet werden.

  uDisplay: https://tasmota.github.io/docs/Universal-Display-Driver/
*/
// hawa-lc4: xsns_02_analog.ino Zeile 482 (12.5.0.2) bzw. 504 (13.2.0.2) aktivieren des logging der ADC Werte
// #define ADC_LOG
#define USE_UFILESYS
#define UFSYS_SIZE 8192
#endif    // ESP8266


#ifdef LUATOS_ESP32C3     // Luatos-ESP32C3 board mit AIR101-LCD Modul
  #error **** ESP32C3 will not build at the moment! ****
#endif

#ifdef ESP32
#ifndef LUATOS_ESP32C3
  #error **** Build ESP8266 only! ****
#endif    // LUATOS_ESP32C3
#endif    // ESP32

#define GUI_EDIT_FILE
#define GUI_TRASH_FILE

#ifdef TELE_PERIOD
#undef TELE_PERIOD
#endif
#define TELE_PERIOD             300              // [TelePeriod] Telemetry (0 = disable, 10 - 3600 seconds)

#ifndef USE_SPI
#define USE_SPI
#endif

#define USE_RC522                              // Add support for MFRC522 13.56Mhz Rfid reader (+6k code)
  #define USE_RC522_DATA_FUNCTION              // Add support for reading data block content (+0k4 code)

#ifndef USE_I2C
#define USE_I2C                              // I2C using library wire (+10k code, 0k2 mem, 124 iram)
#endif

#define USE_RTC_CHIPS                          // Enable RTC chip support and NTP server - Select only one
  #define USE_DS3231                           // [I2cDriver26] Enable DS3231 RTC (I2C address 0x68) (+1k2 code)

#ifdef MODULE
#undef MODULE
#endif
#define MODULE                 USER_MODULE

/*  https://github.com/arendst/Tasmota/discussions/19009  */
#define USE_ALWAYS_AP
// #define WIFI_CONFIG_TOOL       WIFI_MANAGER
#define WIFI_SCAN_AT_RESTART   false
#define WIFI_SCAN_REGULARLY    true

#ifdef WIFI_CONFIG_TOOL
#undef WIFI_CONFIG_TOOL
#endif
#define WIFI_CONFIG_TOOL       WIFI_MANAGER              // [WifiConfig] Default tool if Wi-Fi fails to connect (default option: 4 - WIFI_RETRY)

#ifdef NTP_SERVER1
#undef NTP_SERVER1
#endif
#define NTP_SERVER1            ""

#ifdef NTP_SERVER2
#undef NTP_SERVER2
#endif
#define NTP_SERVER2            ""

#ifdef NTP_SERVER3
#undef NTP_SERVER3
#endif
#define NTP_SERVER3            ""

#ifdef MQTT_USE
#undef MQTT_USE
#endif
#define MQTT_USE               false

#ifdef MQTT_TOPIC
#undef MQTT_TOPIC
#endif
#define MQTT_TOPIC             PROJECT

// #ifndef SUPPORT_MQTT_EVENT
// #define SUPPORT_MQTT_EVENT                     // Support trigger event with MQTT subscriptions (+3k5 code)
// #endif

#ifdef FRIENDLY_NAME
#undef FRIENDLY_NAME
#endif
#define FRIENDLY_NAME          PROJECT

#ifdef GUI_SHOW_HOSTNAME
#undef GUI_SHOW_HOSTNAME
#endif
#define GUI_SHOW_HOSTNAME      true             // [SetOption53] Show hostname and IP address in GUI main menu

#ifdef APP_TIMEZONE
#undef APP_TIMEZONE
#endif
#define APP_TIMEZONE           99     // https://tasmota-tz.netlify.app/

#ifdef MY_LANGUAGE
#undef MY_LANGUAGE
#endif
#define MY_LANGUAGE            de_DE

#ifdef USE_DEEPSLEEP
#undef USE_DEEPSLEEP                              
#endif 

#ifdef USE_DOMOTICZ
#undef USE_DOMOTICZ                              
#endif 

#ifdef USE_EMULATION_HUE
#undef USE_EMULATION_HUE
#endif

#ifdef USE_EMULATION_WEMO
#undef USE_EMULATION_WEMO
#endif

#ifdef USE_TELEGRAM
#undef USE_TELEGRAM
#endif

#ifdef USE_KNX
#undef USE_KNX
#endif

#ifdef USE_SONOFF_RF
#undef USE_SONOFF_RF
#endif

#ifdef ROTARY_V1
#undef ROTARY_V1
#endif

#ifdef USE_SONOFF_SC
#undef USE_SONOFF_SC
#endif

#ifdef USE_TUYA_MCU
#undef USE_TUYA_MCU
#endif

#ifdef USE_ARMTRONIX_DIMMERS
#undef USE_ARMTRONIX_DIMMERS
#endif

#ifdef USE_PS_16_DZ
#undef USE_PS_16_DZ
#endif

#ifdef USE_SONOFF_IFAN
#undef USE_SONOFF_IFAN
#endif

#ifdef USE_BUZZER
#undef USE_BUZZER
#endif

#ifdef USE_ARILUX_RF
#undef USE_ARILUX_RF
#endif

#ifdef USE_SHUTTER
#undef USE_SHUTTER
#endif

#ifdef USE_EXS_DIMMER
#undef USE_EXS_DIMMER
#endif

#ifdef USE_DEVICE_GROUPS
#undef USE_DEVICE_GROUPS
#endif

#ifdef USE_PWM_DIMMER
#undef USE_PWM_DIMMER
#endif

#ifdef USE_SONOFF_D1
#undef USE_SONOFF_D1
#endif

#ifdef USE_SHELLY_DIMMER
#undef USE_SHELLY_DIMMER
#endif

#ifdef USE_LIGHT
#undef USE_LIGHT
#endif

#ifdef USE_WS2812
#undef USE_WS2812
#endif

#ifdef USE_MY92X1
#undef USE_MY92X1
#endif

#ifdef USE_SM16716
#undef USE_SM16716
#endif

#ifdef USE_SM2135
#undef USE_SM2135
#endif

#ifdef USE_SM2335
#undef USE_SM2335
#endif

#ifdef USE_BP1658CJ
#undef USE_BP1658CJ
#endif

#ifdef USE_BP5758D
#undef USE_BP5758D
#endif

#ifdef USE_SONOFF_L1
#undef USE_SONOFF_L1
#endif

#ifdef USE_ELECTRIQ_MOODL
#undef USE_ELECTRIQ_MOODL
#endif

#ifdef USE_LIGHT_PALETTE
#undef USE_LIGHT_PALETTE
#endif

#ifdef USE_LIGHT_VIRTUAL_CT
#undef USE_LIGHT_VIRTUAL_CT
#endif

#ifdef USE_DGR_LIGHT_SEQUENCE
#undef USE_DGR_LIGHT_SEQUENCE
#endif

#ifdef USE_AC_ZERO_CROSS_DIMMER
#undef USE_AC_ZERO_CROSS_DIMMER
#endif

#ifdef USE_DS18x20
#undef USE_DS18x20
#endif

// #ifdef USE_I2C
// #undef USE_I2C
// #endif

// #ifndef LUATOS_ESP32C3
// #ifdef USE_SPI
// #undef USE_SPI
// #endif
// #endif    // LUATOS_ESP32C3

#ifdef USE_SERIAL_BRIDGE
#undef USE_SERIAL_BRIDGE
#endif

#ifdef USE_ENERGY_SENSOR
#undef USE_ENERGY_SENSOR
#endif

#ifdef USE_ENERGY_DUMMY
#undef USE_ENERGY_DUMMY
#endif

#ifdef USE_HLW8012
#undef USE_HLW8012
#endif

#ifdef USE_CSE7766
#undef USE_CSE7766
#endif

#ifdef USE_PZEM004T
#undef USE_PZEM004T
#endif

#ifdef USE_PZEM_AC
#undef USE_PZEM_AC
#endif

#ifdef USE_PZEM_DC
#undef USE_PZEM_DC
#endif

#ifdef USE_MCP39F501
#undef USE_MCP39F501
#endif

#ifdef USE_BL09XX
#undef USE_BL09XX
#endif

#ifdef USE_DHT
#undef USE_DHT
#endif

#ifdef USE_IR_REMOTE
#undef USE_IR_REMOTE
#endif

#ifdef USE_ADE7953
#undef USE_ADE7953
#endif

#endif  // _USER_CONFIG_OVERRIDE_H_
