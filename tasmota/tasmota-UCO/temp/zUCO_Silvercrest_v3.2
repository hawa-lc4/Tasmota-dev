/*
  user_config_override.h - user configuration overrides my_user_config.h for Tasmota

  Copyright (C) 2021  Theo Arends

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef _USER_CONFIG_OVERRIDE_H_
#define _USER_CONFIG_OVERRIDE_H_

/*****************************************************************************************************\
 * USAGE:
 *   To modify the stock configuration without changing the my_user_config.h file:
 *   (1) copy this file to "user_config_override.h" (It will be ignored by Git)
 *   (2) define your own settings below
 *
 ******************************************************************************************************
 * ATTENTION:
 *   - Changes to SECTION1 PARAMETER defines will only override flash settings if you change define CFG_HOLDER.
 *   - Expect compiler warnings when no ifdef/undef/endif sequence is used.
 *   - You still need to update my_user_config.h for major define USE_MQTT_TLS.
 *   - All parameters can be persistent changed online using commands via MQTT, WebConsole or Serial.
\*****************************************************************************************************/

#include "user_private_data.h"               // not sharing sensible data with the global community; hawa-lc4 (M1)
// don't forget to check and modify the file above!

// #ifdef %identifier%
// #undef %identifier%
// #endif
// #define %identifier%   %the_new_value%

#ifdef PROJECT
#undef PROJECT
#endif
#define PROJECT               "Silvercrest"   // der Silvercrest Raumentfeuchter; openWB device 2

#ifdef MY_RULE
  #warning **** Build: RULES ****
  #undef CODE_IMAGE_STR
  #define CODE_IMAGE_STR "T4M_RULE"
  #ifdef USE_SCRIPT
  #undef USE_SCRIPT
  #endif

  #ifndef USE_RULES
  #define USE_RULES
  #endif

  #define USER_RULE1            "ON Power1#Boot DO Backlog0 Hostname Silvercrest;FriendlyName2 programm;AdcParam 7,0,612,0.23,0;" \
        "Mem2 openWB/config/set/SmartHome/Devices/2/mode;Mem3 openWB/config/set/SmartHome/Devices/2/device_manual_control;Rule1 0;Rule1 \" ENDON"   // OK
  #define USER_RULE2            "ON System#Init DO Backlog Ruletimer1 2;LedPower3 1 ENDON " \
        "ON Power1#State DO Backlog RuleTimer1 2;LedPower3 1 ENDON " \
        "ON Rules#Timer=1 DO LedPower3 0 ENDON " \
        "ON Power1#State=1 DO backlog Mem1=1 ENDON " \
        "ON Power1#State=0 DO backlog Mem1=0 ENDON " \
        "ON Power2#State DO LedPower3 %value% ENDON " \
        "ON Button1#State DO IF (Mem1==0) publish %Mem2% 1;Power1 1;publish %Mem3% 1 ELSE publish %Mem3% 0;Power1 0;RuleTimer2 60 ENDIF ENDON " \
        "ON rules#timer=2 DO publish %Mem2% 0 ENDON"
  #define USER_RULE3            ""
  #define USER_BACKLOG          "Rule1 1;Rule2 1;Rule3 1;PulseTime2 7"
  
  /*  "ON System#Init DO Backlog Ruletimer1 2;LedPower3 1 ENDON 
      ON Power1#State DO Backlog RuleTimer1 2;LedPower3 1 ENDON 
      ON Rules#Timer=1 DO LedPower3 0 ENDON 
      ON Power1#State=1 DO backlog Mem1=1 ENDON 
      ON Power1#State=0 DO backlog Mem1=0 ENDON 
      ON Power2#State DO LedPower3 %value% ENDON 
      ON Button1#State DO IF (Mem1==0) publish %Mem2% 1;Power1 1;publish %Mem3% 1 ELSE publish %Mem3% 0;Power1 0;RuleTimer2 60 ENDIF ENDON 
      ON rules#timer=2 DO publish %Mem2% 0 ENDON"*/

  #ifndef USE_EXPRESSION
  #define USE_EXPRESSION
  #endif

  #ifndef SUPPORT_IF_STATEMENT
  #define SUPPORT_IF_STATEMENT
  #endif
#endif // MY_RULE

#ifdef MY_SCRIPT
  // #warning **** Build: SCRIPT ****
  #undef CODE_IMAGE_STR
  #define CODE_IMAGE_STR "T4M_SCRIPT_Silvercrest"

  #ifdef USE_RULES
  #undef USE_RULES
  #endif

  #undef USE_TIMERS
  #undef USE_TIMERS_WEB
  #undef USE_SUNRISE

  #define USE_SCRIPT

  #define USE_SCRIPT_SERIAL
  #define USE_SCRIPT_TIMERS
  // #define USE_SCRIPT_SUB_COMMAND
  #define USE_SCRIPT_GLOBVARS
  // #define USE_SCRIPT_JSON_EXPORT
  // #define USE_SCRIPT_WEB_DISPLAY
  #define USE_BUTTON_EVENT
  #define SCRIPT_POWER_SECTION
  #define START_SCRIPT_FROM_BOOT      // https://tasmota.github.io/docs/Scripting-Language/
  #define USER_BACKLOG "Script 1"     // hier nur script aktivieren, sonst nichts!

  #define PRECONFIGURED_SCRIPT \
  ">D 48\ndNo=2\n" \
      "manu=0\ndevM=0\ndevS=0\nbutA=\"\"\nbutB=\"\"\nbutP=0\n" \
      "p:Pstate=1\nPstring=\"\"\nt:manN=0\nt:manF=0\n" \
      "topM=\"openWB/config/get/SmartHome/Devices\"\n" \
      "topS=\"openWB/SmartHome/Devices\"\n" \
      "sufP=\"device_manual_control\"\n\n" \
  ">B\n" \
      "->SetOption73 1\n->SetOption32 30\n->SwitchMode 5\n" \
      "->LedPower1 1\nmanN=2\n" \
      "if mqtts>0 {\n=#publish\n}\n\n" \
      "#publish\n+>Subscribe devM, %topM%/%0dNo%/mode\n+>Subscribe devS, %topS%/%0dNo%/Status\n\n" \
  ">R\n" \
      "=>Hostname Silvercrest\n=>Friendlyname1 Gerät\n=>Friendlyname2 Programm\n\n" \
  ">E\n" \
      "butA=Button1#Action\n" \
      "butB=Button2#Action\n" \
      "if butA==\"HOLD\" {\n" \
        "if manu==0 {\nmanu=1\n} else {\nmanu=0\n}\n" \
        "=>publish %topic%/%0dNo%/mode %0manu%\n" \
      "}\n" \
      "if (butA==\"SINGLE\" and manu==1) {\n=>publish %topic%/%0dNo%/mode 1\n" \
        "if pwr[1]==0 {\n" \
          "=>publish %topic%/%0dNo%/%sufP% 1\nbutP=11\n" \
          "if (mqtts==0 or devS==0) {\n->Power1 1\n}\n"\
        "} else {\n" \
          "=>publish %topic%/%0dNo%/%sufP% 0\nbutP=10\n" \
          "if (mqtts==0 or devS==0) {\n->Power1 0\n}\n"\
        "}\n" \
      "}\nbutA=\"\"\n" \
      "if (butB!=\"\" and pwr[1]==1) {\n->Power2 1\nbutB=\"\"\n}\n\n"\
  ">T\n" \
      "if manN==0 {\n->LedPower1 0\nmanF=3\nmanN=-1\n}\n" \
      "->LedPower1 %pwr[1]%\n" \
      "if ((butP==10 and pwr[1]==1) or (butP==11 and pwr[1]==0)) {\n" \
        "->LedPower2 toggle\n} else {\n" \
        "butP=0\n}\n" \
      "if butP==0 {\n->LedPower2 %manu%\n}\n" \
      "if mqttc>0 {\n=#publish\n}\n" \
      "if upd[devM]>0 {\nmanu=devM\n}\n\n" \
  ">W\n" \
      "openWB Geräte Nr.: &emsp;&emsp;&emsp;%0dNo%\n" \
      "Manuelle Steuerung:&emsp;&emsp;&emsp;%0manu%\n" \
      "Trockner Programm:&emsp;&emsp;&emsp;%Pstring%\n"


/*    927 Zeichen Skript; 7271 Zeichen übrig von 8192   */

#endif // MY_SCRIPT

#ifdef USER_TEMPLATE
#undef USER_TEMPLATE
#endif

/*  Espressif ESP Modules:  https://www.espressif.com/en/products/modules  */
#ifdef ESP8266
#define USER_TEMPLATE "{\"NAME\":\"Silvercrest\",\"GPIO\":[32,0,544,0,0,0,0,0,33,288,225,224,0,4896],\"FLAG\":0,\"BASE\":18,\"CMND\":\"AdcParam 7,0,612,0.235,0.1\",\"CMND\":\"Module 0\"}"  // [Template] Set JSON template
/* https://tasmota.github.io/docs/Components/  &  https://randomnerdtutorials.com/esp8266-pinout-reference-gpios
  D:\Users\Günter\Documents\Elektronik\ESP32\__Dokumentation\ESP8266_D1-mini-pinout.pdf
  GPIO0  Taster gegen GND (kann damit auch zum FlashBoot benutzt werden) -- 32     // Taster1: Ein/Aus und openWB:Manuell/Automatik
  GPIO1  TX UART0                                                        -- 0      // 
  GPIO2  hat die interne LED gegen VCC; Funktion LedLink (544; _i: 576)  -- 544    // LedLink
  GPIO3  RX UART0                                                        -- 0      // 
  GPIO4  I2C SDA (640)                                                   -- 0      // 
  GPIO5  I2C SCL (608)                                                   -- 0      // 
  GPIO9  DO NOT USE!!                                                    -- 0      // DO NOT USE!!
  GPIO10 DO NOT USE!!                                                    -- 0      // DO NOT USE!!
  GPIO12 SPI MISO (672)                                                  -- 33     // Taster2: Programmwahl
  GPIO13 SPI MOSI (704)                                                  -- 288    // Led1: Anzeige für Stellung Manuell|Automatik;  LED bl.
  GPIO14 SPI CLK  (736)                                                  -- 225    // Relais2: Umschalter für Programm (nur WebUI)
  GPIO15 SPI SS (768) - SDCard CS (6240)                                 -- 224    // Relais1: Schaltrelais für Gerätesteuerung
  GPIO16 (wake-up aus dem deep-sleep Modus: 4096)                        -- 0      //
  GPIO17 ist der AD0 (CT Power: 4896)                                    -- 4896   // ACS712-05 Stromsensor 185 mv/A (Upp = 2,616 V)
  GPIO17 ist der AD0 (CT Power: 4896)                                    -- 4896   // ACS712-20 Stromsensor 100 mv/A (UPP = 5,657 V)
!!  ACHTUNG:  der D1-mini hat am Eingang AD0 einen Spannungsteiler und damit eine max. Eingangsspannung von 3,3V
              der ESP8266 hat keinen Spannungsteiler und damit eine max. Eingangsspannung von 1,0V

  AdcParam:  7 = CT Power
    1. Param:   Nullpunkt für DC Messung; bei AC immer 0!
    2. Param:   Multiplikator; param = (100.000 * Irms / ADC_value); ADC_value = Upp_sensor / 4,976 * 1023; Spannungsteiler: (330.000 + 83.000)/83.000 = 4,976; 83=68+15
                (https://github.com/arendst/Tasmota/discussions/19409#discussioncomment-6857837)
                ACHTUNG:  Theorie und Praxis!
    3. Param:   Spannung; Wert * 1000
    4. Param:   NULL-Offset; Strom kleiner als der hier eingetragene wird als 0 behandelt
  hawa: xsns_02_analog.ino aktivieren zum logging der ADC Werte
*/
#define hawa_LOG               false
#define USE_UFILESYS
#define UFSYS_SIZE 8192
#endif    // ESP8266

#ifdef ESP32      // BAUSTELLE!!
/*  template GPIO pin mapping:  https://github.com/arendst/Tasmota/discussions/19000
      [0,1,2,3,4,5,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,6,7,8,11,32,33,34,35,36,37,38,39]
      Gpio.00     IO  160 Switch1
      Gpio.01     TX    1 User
      Gpio.02     IO    1 User
      Gpio.03     RX    1 User
      Gpio.04     IO    1 User
      Gpio.05     IO    1 User
      Gpio.09     FL    1 User
      Gpio.10     FL    1 User
      Gpio.12     IO    1 User
      Gpio.13     IO    1 User
      Gpio.14     IO    1 User
      Gpio.15     IO    1 User
      Gpio.16     IO    1 User
      Gpio.17     IO    1 User
      Gpio.18     IO    1 User
      Gpio.19     IO    1 User
      Gpio.20     IO    0 None
      Gpio.21     IO  640 I2C SDA1
      Gpio.22     IO  608 I2C SCL1
      Gpio.23     IO    1 User
      Gpio.24     IO    0 None
      Gpio.25     IO    1 User
      Gpio.26     IO    1 User
      Gpio.27     IO    1 User
      Gpio.06     FL    0 None
      Gpio.07     FL    0 None
      Gpio.08     FL    0 None
      Gpio.11     FL    0 None
      Gpio.32     AO    1 User
      Gpio.33     AO    1 User
      Gpio.34     IA    1 User
      Gpio.35     IA    1 User
      Gpio.36     IA    1 User
      Gpio.37     IA    0 None
      Gpio.38     IA    0 None
      Gpio.39     IA    1 User
*/
//  User Template ScratchPad:  [32,1,544,3,4,5,9,10,12,13,14,15,16,17,18,19,0,640,608,1312,0,25,26,27,0,0,0,0,32,33,34,35,36,0,0,4896]
#define USER_TEMPLATE "{\"NAME\":\"Silvercrest\",\"GPIO\":[32,1,544,1,1,1,0,0,1,1,1,1,1,1,1,1,0,640,608,1312,0,1,1,1,0,0,0,0,1,1,1,1,1,0,0,4896],\"FLAG\":0,\"BASE\":1,\"CMND\":\"AdcParam 7,0,612,0.235,0.1\",\"CMND\":\"Module 0\"}"
/* https://tasmota.github.io/docs/Components/  &  https://randomnerdtutorials.com/esp32-pinout-reference-gpios/
  GPIO00 Taster gegen GND (kann damit auch zum FlashBoot benutzt werden) -- 0      // 
  GPIO01 TX UART0                                                        -- 0      // belegt durch USB
  GPIO02 hat die interne LED gegen VCC; Funktion LedLink (544; _i: 576)  -- 544    // LedLink
  GPIO03 RX UART0                                                        -- 0      // belegt durch USB
  GPIO04                                                                 -- 1      // 
  GPIO05 VSPI CS0                                                        -- 1      // 
  GPIO09 DO NOT USE!!   (SDData2)                                        -- 0      // DO NOT USE!!
  GPIO10 DO NOT USE!!   (SDData3)                                        -- 0      // DO NOT USE!!
  GPIO12 HSPI MISO                                                       -- 1      // 
  GPIO13 HSPI MOSI                                                       -- 1      // 
  GPIO14 HSPI CLK                                                        -- 1      // 
  GPIO15 HSPI CS0                                                        -- 1      // 
  GPIO16 RX UART2                                                        -- 1      //
  GPIO17 TX UART2                                                        -- 1      // 
  GPIO18 VSPI CLK                                                        -- 1      // 
  GPIO19 VSPI MISO                                                       -- 1      // 
  GPIO20 Nicht verfügbar auf den meisten Boards                          -- 0      // Nicht verfügbar auf den meisten Boards
  GPIO21 I2C SDA                                                         -- 640    // I2C SDA
  GPIO22 I2C SCL                                                         -- 608    // I2C SCL
  GPIO23 VSPI MOSI                                                       -- 1312   // DS18x20 1-wire
  GPIO24 Nicht verfügbar auf den meisten Boards                          -- 0      // Nicht verfügbar auf den meisten Boards
  GPIO25                                                                 -- 1      // 
  GPIO26                                                                 -- 1      // 
  GPIO27                                                                 -- 1      // 
  GPIO06 DO NOT USE!!   (SDCLK)                                          -- 0      // DO NOT USE!!
  GPIO07 DO NOT USE!!   (SDData0)                                        -- 0      // DO NOT USE!!
  GPIO08 DO NOT USE!!   (SDData1)                                        -- 0      // DO NOT USE!!
  GPIO11 DO NOT USE!!   (SDCMD)                                          -- 0      // DO NOT USE!!
  GPIO32                                                                 -- 1      // 
  GPIO33                                                                 -- 1      // 
  GPIO34 (input only)                                                    -- 1      // 
  GPIO35 (input only)                                                    -- 1      // 
  GPIO36 (input only)                                                    -- 1      // 
  GPIO37 Nicht verfügbar auf den meisten Boards                          -- 0      // Nicht verfügbar auf den meisten Boards
  GPIO38 Nicht verfügbar auf den meisten Boards                          -- 0      // Nicht verfügbar auf den meisten Boards
  GPIO39 (input only)  ADC1_0 (CT Power: 4896)                           -- 4896   // ACS712-05 Stromsensor 185 mv/A (Upp = 2,616 V)
Nicht jedes Board hat alle GPIOs verfügbar!
  GPIO00 fehlt auf dem DEVKIT V1 – DOIT 30-Pin Board und ist nur durch den boot-Taster am Board bedienbar.
  Das DEVKIT V1 – DOIT 30-Pin Board verwendest Standardmäßig den VSPI.
Aufpassen bei VSPI und HSPI; die sind nicht immmer auf allen Boards gleich definiert! VSPI ist üblicherweise der Standard SPI Bus.
Strapping Pins:   The ESP32 chip has the following strapping pins:
    GPIO 0 (must be LOW to enter boot mode)
    GPIO 2 (must be floating or LOW during boot)
    GPIO 5 (must be HIGH during boot)
    GPIO 12 (must be LOW during boot)
    GPIO 15 (must be HIGH during boot)

  AdcParam:  7 = CT Power
    1. Param:   Nullpunkt für DC Messung; bei AC immer 0!
    2. Param:   Multiplikator; param = (100.000 * Irms / ADC_value); ADC_value = Upp_sensor / 4,976 * 1023; Spannungsteiler: (330.000 + 83.000)/83.000 = 4,976; 83=68+15
                (https://github.com/arendst/Tasmota/discussions/19409#discussioncomment-6857837)
                ACHTUNG:  Theorie und Praxis!
    3. Param:   Spannung; Wert * 1000
    4. Param:   NULL-Offset; Strom kleiner als der hier eingetragene wird als 0 behandelt
*/
// hawa-lc4: xsns_02_analog.ino Zeile 482 (12.5.0.2) bzw. 504 (13.2.0.2) aktivieren des logging der ADC Werte
// #define ADC_LOG

#ifdef USE_NETWORK_LIGHT_SCHEMES
#undef USE_NETWORK_LIGHT_SCHEMES                // Add support for light schemes via DDP (via UDP on port 4048)
#endif
#ifdef USE_CSE7761
#undef USE_CSE7761                              // Add support for CSE7761 Energy monitor as used in Sonoff Dual R3
#endif
#endif    // ESP32

#ifndef USE_DS18x20
#define USE_DS18x20
#endif

#ifndef USE_I2C
#define USE_I2C
#endif
#define USE_BMP                                // [I2cDriver10] Enable BMP085/BMP180/BMP280/BME280 sensors (I2C addresses 0x76 and 0x77) (+4k4 code)
// #define USE_PCF8574                            // [I2cDriver2] Enable PCF8574 I/O Expander (I2C addresses 0x20 - 0x26 and 0x39 - 0x3F) (+2k1 code)
// #define USE_PCF8574_MODE2                      // Enable Mode2 virtual relays/buttons/switches (+2k3 code)
#define USE_TM1638                               // Add support for TM1638 switches copying Switch1 .. Switch8 (+1k code)
  #define TM1638_USE_AS_BUTTON                   // Add support for buttons
  // #define TM1638_USE_AS_SWITCH                   // Add support for switches (default)
  #define TM1638_MAX_DISPLAYS    2               // Add support for power control 8 displays
  #define TM1638_MAX_KEYS        6               // Add support for 8 keys
  #define TM1638_MAX_LEDS        8               // Add support for 8 leds

#define GUI_EDIT_FILE
#define GUI_TRASH_FILE

#ifdef TELE_PERIOD
#undef TELE_PERIOD
#endif
#define TELE_PERIOD             300              // [TelePeriod] Telemetry (0 = disable, 10 - 3600 seconds)

#ifdef MODULE
#undef MODULE
#endif
#define MODULE                 USER_MODULE

#ifdef FRIENDLY_NAME
#undef FRIENDLY_NAME
#endif
#define FRIENDLY_NAME          PROJECT

#ifdef GUI_SHOW_HOSTNAME
#undef GUI_SHOW_HOSTNAME
#endif
#define GUI_SHOW_HOSTNAME      true

#ifdef APP_TIMEZONE
#undef APP_TIMEZONE
#endif
#define APP_TIMEZONE           99     // https://tasmota-tz.netlify.app/

#ifdef MY_LANGUAGE
#undef MY_LANGUAGE
#endif
#define MY_LANGUAGE            de_DE

#ifdef MQTT_USE
#undef MQTT_USE
#endif
#define MQTT_USE               true

#ifdef MQTT_TOPIC
#undef MQTT_TOPIC
#endif
#define MQTT_TOPIC             "openWB/config/set/SmartHome/Devices"

#ifdef MQTT_FULLTOPIC
#undef MQTT_FULLTOPIC
#endif
#define MQTT_FULLTOPIC         PROJECT

#ifndef SUPPORT_MQTT_EVENT
#define SUPPORT_MQTT_EVENT                     // Support trigger event with MQTT subscriptions (+3k5 code)
#endif

#ifdef WEB_USERNAME
#undef WEB_USERNAME
#endif
#define WEB_USERNAME            ""

#ifdef WEB_PASSWORD
#undef WEB_PASSWORD
#endif
#define WEB_PASSWORD            ""

#ifdef USE_DEEPSLEEP
#undef USE_DEEPSLEEP                              
#endif 

#ifdef USE_DOMOTICZ
#undef USE_DOMOTICZ                              
#endif 

#ifdef USE_EMULATION_HUE
#undef USE_EMULATION_HUE
#endif

#ifdef USE_EMULATION_WEMO
#undef USE_EMULATION_WEMO
#endif

#ifdef USE_TELEGRAM
#undef USE_TELEGRAM
#endif

#ifdef USE_KNX
#undef USE_KNX
#endif

#ifdef USE_SONOFF_RF
#undef USE_SONOFF_RF
#endif

#ifdef ROTARY_V1
#undef ROTARY_V1
#endif

#ifdef USE_SONOFF_SC
#undef USE_SONOFF_SC
#endif

#ifdef USE_TUYA_MCU
#undef USE_TUYA_MCU
#endif

#ifdef USE_ARMTRONIX_DIMMERS
#undef USE_ARMTRONIX_DIMMERS
#endif

#ifdef USE_PS_16_DZ
#undef USE_PS_16_DZ
#endif

#ifdef USE_SONOFF_IFAN
#undef USE_SONOFF_IFAN
#endif

#ifdef USE_BUZZER
#undef USE_BUZZER
#endif

#ifdef USE_ARILUX_RF
#undef USE_ARILUX_RF
#endif

#ifdef USE_SHUTTER
#undef USE_SHUTTER
#endif

#ifdef USE_EXS_DIMMER
#undef USE_EXS_DIMMER
#endif

#ifdef USE_DEVICE_GROUPS
#undef USE_DEVICE_GROUPS
#endif

#ifdef USE_PWM_DIMMER
#undef USE_PWM_DIMMER
#endif

#ifdef USE_SONOFF_D1
#undef USE_SONOFF_D1
#endif

#ifdef USE_SHELLY_DIMMER
#undef USE_SHELLY_DIMMER
#endif

#ifdef USE_LIGHT
#undef USE_LIGHT
#endif

#ifdef USE_WS2812
#undef USE_WS2812
#endif

#ifdef USE_MY92X1
#undef USE_MY92X1
#endif

#ifdef USE_SM16716
#undef USE_SM16716
#endif

#ifdef USE_SM2135
#undef USE_SM2135
#endif

#ifdef USE_SM2335
#undef USE_SM2335
#endif

#ifdef USE_BP1658CJ
#undef USE_BP1658CJ
#endif

#ifdef USE_BP5758D
#undef USE_BP5758D
#endif

#ifdef USE_SONOFF_L1
#undef USE_SONOFF_L1
#endif

#ifdef USE_ELECTRIQ_MOODL
#undef USE_ELECTRIQ_MOODL
#endif

#ifdef USE_LIGHT_PALETTE
#undef USE_LIGHT_PALETTE
#endif

#ifdef USE_LIGHT_VIRTUAL_CT
#undef USE_LIGHT_VIRTUAL_CT
#endif

#ifdef USE_DGR_LIGHT_SEQUENCE
#undef USE_DGR_LIGHT_SEQUENCE
#endif

#ifdef USE_SPI
#undef USE_SPI
#endif

#ifdef USE_SERIAL_BRIDGE
#undef USE_SERIAL_BRIDGE
#endif

#ifdef USE_ENERGY_MARGIN_DETECTION
#undef USE_ENERGY_MARGIN_DETECTION
#endif

#ifdef USE_ENERGY_POWER_LIMIT
#undef USE_ENERGY_POWER_LIMIT
#endif

#ifdef USE_ENERGY_DUMMY
#undef USE_ENERGY_DUMMY
#endif

#ifdef USE_HLW8012
#undef USE_HLW8012
#endif

#ifdef USE_CSE7766
#undef USE_CSE7766
#endif

#ifdef USE_PZEM004T
#undef USE_PZEM004T
#endif

#ifdef USE_PZEM_AC
#undef USE_PZEM_AC
#endif

#ifdef USE_PZEM_DC
#undef USE_PZEM_DC
#endif

#ifdef USE_MCP39F501
#undef USE_MCP39F501
#endif

#ifdef USE_BL09XX
#undef USE_BL09XX
#endif

#ifdef USE_DHT
#undef USE_DHT
#endif

#ifdef USE_IR_REMOTE
#undef USE_IR_REMOTE
#endif

#ifdef USE_ADE7953
#undef USE_ADE7953
#endif

#endif  // _USER_CONFIG_OVERRIDE_H_
